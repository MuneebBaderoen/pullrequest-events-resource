#! /usr/bin/env node

const {getStdin, getSourceConfig} = require('./common.js')
const fetch = require('node-fetch')
const { ApolloClient } = require('apollo-client')
const { HttpLink } = require('apollo-link-http');
const { InMemoryCache } = require('apollo-cache-inmemory');
const gql = require('graphql-tag');

/**
 * This function makes the graphql request to fetch the most recent 10 pull requests
 * That have been merged
 * @param config source config object
 */
async function getMergedPullRequests(rawConfig) {

  let config = await getSourceConfig(rawConfig)

  // params necessary for request
  let graphqlApi = config["graphql_api"]
  let accessToken = config["access_token"]
  let baseBranch = config["base_branch"]
  let owner = config["owner"]
  let repo = config["repo"]
  const first = config["first"]
  let after = undefined;
  if (rawConfig["version"]) {
    after = rawConfig["version"].cursor
  }
  

  // setup the client
  const client = new ApolloClient({
    link: new HttpLink({
      uri: graphqlApi,
      fetch: fetch,
      headers: {
        authorization: "Bearer " + accessToken
      }
    }),
    cache: new InMemoryCache()
  });

  const closedPrQuery = gql`
    query RecentlyMergedOrClosedPullRequests(
      $owner: String!, 
      $repo: String!, 
      $baseBranch: String!, 
      $first: Int!,
      $after: String
    ) {
      repository(owner: $owner, name: $repo) {
        nameWithOwner
        url 
        pullRequests(
          first: $first,
          baseRefName: $baseBranch, 
          states: [MERGED, CLOSED], 
          orderBy:{field:UPDATED_AT, direction:ASC},
          after: $after
        ) {
          edges {
            cursor
            node{
              id
              number
              url
              baseRefName
              headRefName
            }
          }
        }
      }
    }
  `;

  let resp = await client.query({
    query: closedPrQuery,
    variables: {
      owner,
      repo,
      baseBranch,
      first,
      after
    }
  });

  return resp.data.repository.pullRequests.edges

}


/**
 * Returns a list of versions
 * @param pullRequests array of pull request objects
 */
function convertToVersions(pullRequests) {

  let versions = [];

  for (let pr of pullRequests) {
    versions.push({
      id: pr.node.id,
      cursor: pr.cursor,
      number: pr.node.number.toString(),
      url: pr.node.url,
      baseBranch: pr.node.baseRefName,
      headBranch: pr.node.headRefName
    })
  }

  return versions
}

/**
 * Main function of the check script
 */
async function check() {

  try {
    let rawConfig = await getStdin()

    let pullRequests = await getMergedPullRequests(rawConfig)
  
    let versions = convertToVersions(pullRequests)

    if (rawConfig.version) {
      versions = [rawConfig.version].concat(versions)
    }
  
    console.log(JSON.stringify(versions))
  } catch (err) {
    console.error(err)
    process.exit(1)
  }
}

check()